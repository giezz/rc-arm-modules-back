@startuml

!theme plain
top to bottom direction
skinparam linetype ortho
left to right direction

class FormController {
  + getById(Long): ResponseEntity<?>
  + createForm(FormDto): ResponseEntity<?>
  + getAll(): ResponseEntity<?>
  + getByName(String): ResponseEntity<?>
  + deleteById(Long): ResponseEntity<?>
}
interface FormQuestionRepository << interface >> {
  + findByFormId(Long): List<FormQuestion>
  + deleteByQuestionId(Long): void
  + deleteByFormId(Long): void
  + deleteByQuestionFormId(Long, Long): void
}
interface FormRepository << interface >> {
  + findById(Long): Optional<Form>
  + findAll(): List<Form>
  + findAllByName(String): List<Form>
}
class FormService {
  - createSaveFormDto(FormDto, Form): FormDto
  - processQuestionsAndVariants(List<QuestionDto>): List<Question>
  + getFormDtoById(Long): FormDto
  - deleteOldQuestions(List<Question>, List<Question>, Long): void
  + createForm(FormDto): FormDto
  + getListFormDtoByName(String): List<FormDto>
  - createFormQuestion(Form, Question): FormQuestion
  + deleteForm(Long): void
  + getFormById(Long): Form
  + getAllFormDto(): List<FormDto>
}
class InterpretationController {
  + getById(Long): ResponseEntity<?>
  + getAll(): ResponseEntity<?>
}
interface InterpretationRepository << interface >> {
  + findById(Long): Optional<Interpretation>
  + findAll(): List<Interpretation>
}
class InterpretationService {
  + getById(Long): Interpretation
  + getAll(): List<Interpretation>
}
class QuestionController {
  + getById(Long): ResponseEntity<?>
  + getAll(): ResponseEntity<?>
}
interface QuestionRepository << interface >> {
  + findById(Long): Optional<Question>
  + findAll(): List<Question>
}
class QuestionService {
  + toEntity(QuestionDto): Question
  + save(Question): Question
  + deleteById(Long): void
  + toDto(Question): QuestionDto
  + findById(Long): Question
  + toEntityList(List<QuestionDto>): List<Question>
  + getQuestions(): List<QuestionDto>
  + getDtoById(Long): QuestionDto
  + delete(Question): void
}
class ScaleController {
  + addScale(ScaleDto): ResponseEntity<?>
  + getAll(): ResponseEntity<?>
  + deleteScale(Long): ResponseEntity<?>
}
interface ScaleRepository << interface >>
class ScaleService {
  + addScale(ScaleDto): ScaleDto
  + deleteScale(Long): void
  + getScales(): List<ScaleDto>
}
interface VariantRepository << interface >> {
  + findById(Long): Optional<Variant>
  + findAll(): List<Variant>
  + deleteByQuestion_id(Long): void
}
class VariantService {
  + deleteByQuestionId(Long): void
  + processVariants(Set<VariantDto>, Question): void
  + getVariantById(Long): Variant
}
class FormQuestionService{
    + save(FormQuestion): void
    + findByFormId(Long): List<FormQuestion>
    + deleteByFormId(Long): void
    + deleteByQuestionId(Long): void
    + deleteByQuestionFormId(Long, Long): void
}


FormQuestionService      "1" *-[#595959,plain]--> FormQuestionRepository
FormService              "1" *-[#595959,plain]--> FormQuestionService
FormService              "1" *-[#595959,plain]----> FormRepository
FormService              "1" *-[#595959,plain]--> QuestionService
FormService              "1" *-[#595959,plain]--> VariantService
FormService              "1" *-[#595959,plain]--> ScaleService
FormController           "1" *-[#595959,plain]-> FormService
InterpretationController "1" *-[#595959,plain]--> InterpretationService
InterpretationService    "1" *-[#595959,plain]---> InterpretationRepository
QuestionService          "1" *-[#595959,plain]--> QuestionRepository
QuestionController       "1" *-[#595959,plain]---> QuestionService
ScaleController          "1" *-[#595959,plain]---> ScaleService
ScaleService             "1" *-[#595959,plain]--> ScaleRepository
VariantService           "1" *-[#595959,plain]--> VariantRepository
@enduml
